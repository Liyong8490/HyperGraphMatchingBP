# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_FactorGraph')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_FactorGraph')
    _FactorGraph = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_FactorGraph', [dirname(__file__)])
        except ImportError:
            import _FactorGraph
            return _FactorGraph
        if fp is not None:
            try:
                _mod = imp.load_module('_FactorGraph', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _FactorGraph = swig_import_helper()
    del swig_import_helper
else:
    import _FactorGraph
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FactorGraph.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _FactorGraph.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _FactorGraph.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _FactorGraph.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _FactorGraph.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _FactorGraph.SwigPyIterator_equal(self, x)

    def copy(self):
        return _FactorGraph.SwigPyIterator_copy(self)

    def next(self):
        return _FactorGraph.SwigPyIterator_next(self)

    def __next__(self):
        return _FactorGraph.SwigPyIterator___next__(self)

    def previous(self):
        return _FactorGraph.SwigPyIterator_previous(self)

    def advance(self, n):
        return _FactorGraph.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _FactorGraph.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _FactorGraph.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _FactorGraph.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _FactorGraph.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _FactorGraph.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _FactorGraph.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _FactorGraph.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class intArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _FactorGraph.new_intArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FactorGraph.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _FactorGraph.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _FactorGraph.intArray___setitem__(self, index, value)

    def cast(self):
        return _FactorGraph.intArray_cast(self)
    frompointer = staticmethod(_FactorGraph.intArray_frompointer)
intArray_swigregister = _FactorGraph.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _FactorGraph.intArray_frompointer(t)
intArray_frompointer = _FactorGraph.intArray_frompointer

class doubleArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _FactorGraph.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FactorGraph.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _FactorGraph.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _FactorGraph.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _FactorGraph.doubleArray_cast(self)
    frompointer = staticmethod(_FactorGraph.doubleArray_frompointer)
doubleArray_swigregister = _FactorGraph.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _FactorGraph.doubleArray_frompointer(t)
doubleArray_frompointer = _FactorGraph.doubleArray_frompointer

class VecInt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _FactorGraph.VecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _FactorGraph.VecInt___nonzero__(self)

    def __bool__(self):
        return _FactorGraph.VecInt___bool__(self)

    def __len__(self):
        return _FactorGraph.VecInt___len__(self)

    def __getslice__(self, i, j):
        return _FactorGraph.VecInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _FactorGraph.VecInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _FactorGraph.VecInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _FactorGraph.VecInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _FactorGraph.VecInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _FactorGraph.VecInt___setitem__(self, *args)

    def pop(self):
        return _FactorGraph.VecInt_pop(self)

    def append(self, x):
        return _FactorGraph.VecInt_append(self, x)

    def empty(self):
        return _FactorGraph.VecInt_empty(self)

    def size(self):
        return _FactorGraph.VecInt_size(self)

    def swap(self, v):
        return _FactorGraph.VecInt_swap(self, v)

    def begin(self):
        return _FactorGraph.VecInt_begin(self)

    def end(self):
        return _FactorGraph.VecInt_end(self)

    def rbegin(self):
        return _FactorGraph.VecInt_rbegin(self)

    def rend(self):
        return _FactorGraph.VecInt_rend(self)

    def clear(self):
        return _FactorGraph.VecInt_clear(self)

    def get_allocator(self):
        return _FactorGraph.VecInt_get_allocator(self)

    def pop_back(self):
        return _FactorGraph.VecInt_pop_back(self)

    def erase(self, *args):
        return _FactorGraph.VecInt_erase(self, *args)

    def __init__(self, *args):
        this = _FactorGraph.new_VecInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _FactorGraph.VecInt_push_back(self, x)

    def front(self):
        return _FactorGraph.VecInt_front(self)

    def back(self):
        return _FactorGraph.VecInt_back(self)

    def assign(self, n, x):
        return _FactorGraph.VecInt_assign(self, n, x)

    def resize(self, *args):
        return _FactorGraph.VecInt_resize(self, *args)

    def insert(self, *args):
        return _FactorGraph.VecInt_insert(self, *args)

    def reserve(self, n):
        return _FactorGraph.VecInt_reserve(self, n)

    def capacity(self):
        return _FactorGraph.VecInt_capacity(self)
    __swig_destroy__ = _FactorGraph.delete_VecInt
    __del__ = lambda self: None
VecInt_swigregister = _FactorGraph.VecInt_swigregister
VecInt_swigregister(VecInt)

class VecVecInt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _FactorGraph.VecVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _FactorGraph.VecVecInt___nonzero__(self)

    def __bool__(self):
        return _FactorGraph.VecVecInt___bool__(self)

    def __len__(self):
        return _FactorGraph.VecVecInt___len__(self)

    def __getslice__(self, i, j):
        return _FactorGraph.VecVecInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _FactorGraph.VecVecInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _FactorGraph.VecVecInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _FactorGraph.VecVecInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _FactorGraph.VecVecInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _FactorGraph.VecVecInt___setitem__(self, *args)

    def pop(self):
        return _FactorGraph.VecVecInt_pop(self)

    def append(self, x):
        return _FactorGraph.VecVecInt_append(self, x)

    def empty(self):
        return _FactorGraph.VecVecInt_empty(self)

    def size(self):
        return _FactorGraph.VecVecInt_size(self)

    def swap(self, v):
        return _FactorGraph.VecVecInt_swap(self, v)

    def begin(self):
        return _FactorGraph.VecVecInt_begin(self)

    def end(self):
        return _FactorGraph.VecVecInt_end(self)

    def rbegin(self):
        return _FactorGraph.VecVecInt_rbegin(self)

    def rend(self):
        return _FactorGraph.VecVecInt_rend(self)

    def clear(self):
        return _FactorGraph.VecVecInt_clear(self)

    def get_allocator(self):
        return _FactorGraph.VecVecInt_get_allocator(self)

    def pop_back(self):
        return _FactorGraph.VecVecInt_pop_back(self)

    def erase(self, *args):
        return _FactorGraph.VecVecInt_erase(self, *args)

    def __init__(self, *args):
        this = _FactorGraph.new_VecVecInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _FactorGraph.VecVecInt_push_back(self, x)

    def front(self):
        return _FactorGraph.VecVecInt_front(self)

    def back(self):
        return _FactorGraph.VecVecInt_back(self)

    def assign(self, n, x):
        return _FactorGraph.VecVecInt_assign(self, n, x)

    def resize(self, *args):
        return _FactorGraph.VecVecInt_resize(self, *args)

    def insert(self, *args):
        return _FactorGraph.VecVecInt_insert(self, *args)

    def reserve(self, n):
        return _FactorGraph.VecVecInt_reserve(self, n)

    def capacity(self):
        return _FactorGraph.VecVecInt_capacity(self)
    __swig_destroy__ = _FactorGraph.delete_VecVecInt
    __del__ = lambda self: None
VecVecInt_swigregister = _FactorGraph.VecVecInt_swigregister
VecVecInt_swigregister(VecVecInt)

class VecDouble(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _FactorGraph.VecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _FactorGraph.VecDouble___nonzero__(self)

    def __bool__(self):
        return _FactorGraph.VecDouble___bool__(self)

    def __len__(self):
        return _FactorGraph.VecDouble___len__(self)

    def __getslice__(self, i, j):
        return _FactorGraph.VecDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _FactorGraph.VecDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _FactorGraph.VecDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _FactorGraph.VecDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _FactorGraph.VecDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _FactorGraph.VecDouble___setitem__(self, *args)

    def pop(self):
        return _FactorGraph.VecDouble_pop(self)

    def append(self, x):
        return _FactorGraph.VecDouble_append(self, x)

    def empty(self):
        return _FactorGraph.VecDouble_empty(self)

    def size(self):
        return _FactorGraph.VecDouble_size(self)

    def swap(self, v):
        return _FactorGraph.VecDouble_swap(self, v)

    def begin(self):
        return _FactorGraph.VecDouble_begin(self)

    def end(self):
        return _FactorGraph.VecDouble_end(self)

    def rbegin(self):
        return _FactorGraph.VecDouble_rbegin(self)

    def rend(self):
        return _FactorGraph.VecDouble_rend(self)

    def clear(self):
        return _FactorGraph.VecDouble_clear(self)

    def get_allocator(self):
        return _FactorGraph.VecDouble_get_allocator(self)

    def pop_back(self):
        return _FactorGraph.VecDouble_pop_back(self)

    def erase(self, *args):
        return _FactorGraph.VecDouble_erase(self, *args)

    def __init__(self, *args):
        this = _FactorGraph.new_VecDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _FactorGraph.VecDouble_push_back(self, x)

    def front(self):
        return _FactorGraph.VecDouble_front(self)

    def back(self):
        return _FactorGraph.VecDouble_back(self)

    def assign(self, n, x):
        return _FactorGraph.VecDouble_assign(self, n, x)

    def resize(self, *args):
        return _FactorGraph.VecDouble_resize(self, *args)

    def insert(self, *args):
        return _FactorGraph.VecDouble_insert(self, *args)

    def reserve(self, n):
        return _FactorGraph.VecDouble_reserve(self, n)

    def capacity(self):
        return _FactorGraph.VecDouble_capacity(self)
    __swig_destroy__ = _FactorGraph.delete_VecDouble
    __del__ = lambda self: None
VecDouble_swigregister = _FactorGraph.VecDouble_swigregister
VecDouble_swigregister(VecDouble)

class VecVecdouble(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _FactorGraph.VecVecdouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _FactorGraph.VecVecdouble___nonzero__(self)

    def __bool__(self):
        return _FactorGraph.VecVecdouble___bool__(self)

    def __len__(self):
        return _FactorGraph.VecVecdouble___len__(self)

    def __getslice__(self, i, j):
        return _FactorGraph.VecVecdouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _FactorGraph.VecVecdouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _FactorGraph.VecVecdouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _FactorGraph.VecVecdouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _FactorGraph.VecVecdouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _FactorGraph.VecVecdouble___setitem__(self, *args)

    def pop(self):
        return _FactorGraph.VecVecdouble_pop(self)

    def append(self, x):
        return _FactorGraph.VecVecdouble_append(self, x)

    def empty(self):
        return _FactorGraph.VecVecdouble_empty(self)

    def size(self):
        return _FactorGraph.VecVecdouble_size(self)

    def swap(self, v):
        return _FactorGraph.VecVecdouble_swap(self, v)

    def begin(self):
        return _FactorGraph.VecVecdouble_begin(self)

    def end(self):
        return _FactorGraph.VecVecdouble_end(self)

    def rbegin(self):
        return _FactorGraph.VecVecdouble_rbegin(self)

    def rend(self):
        return _FactorGraph.VecVecdouble_rend(self)

    def clear(self):
        return _FactorGraph.VecVecdouble_clear(self)

    def get_allocator(self):
        return _FactorGraph.VecVecdouble_get_allocator(self)

    def pop_back(self):
        return _FactorGraph.VecVecdouble_pop_back(self)

    def erase(self, *args):
        return _FactorGraph.VecVecdouble_erase(self, *args)

    def __init__(self, *args):
        this = _FactorGraph.new_VecVecdouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _FactorGraph.VecVecdouble_push_back(self, x)

    def front(self):
        return _FactorGraph.VecVecdouble_front(self)

    def back(self):
        return _FactorGraph.VecVecdouble_back(self)

    def assign(self, n, x):
        return _FactorGraph.VecVecdouble_assign(self, n, x)

    def resize(self, *args):
        return _FactorGraph.VecVecdouble_resize(self, *args)

    def insert(self, *args):
        return _FactorGraph.VecVecdouble_insert(self, *args)

    def reserve(self, n):
        return _FactorGraph.VecVecdouble_reserve(self, n)

    def capacity(self):
        return _FactorGraph.VecVecdouble_capacity(self)
    __swig_destroy__ = _FactorGraph.delete_VecVecdouble
    __del__ = lambda self: None
VecVecdouble_swigregister = _FactorGraph.VecVecdouble_swigregister
VecVecdouble_swigregister(VecVecdouble)

BABTYPES_H = _FactorGraph.BABTYPES_H
class MostFractionalNodes(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Nodes = _swig_property(_FactorGraph.MostFractionalNodes_Nodes_get, _FactorGraph.MostFractionalNodes_Nodes_set)
    States = _swig_property(_FactorGraph.MostFractionalNodes_States_get, _FactorGraph.MostFractionalNodes_States_set)
    gap = _swig_property(_FactorGraph.MostFractionalNodes_gap_get, _FactorGraph.MostFractionalNodes_gap_set)

    def __init__(self):
        this = _FactorGraph.new_MostFractionalNodes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FactorGraph.delete_MostFractionalNodes
    __del__ = lambda self: None
MostFractionalNodes_swigregister = _FactorGraph.MostFractionalNodes_swigregister
MostFractionalNodes_swigregister(MostFractionalNodes)

FACTORSTORE_H = _FactorGraph.FACTORSTORE_H
class FactorStore(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    data = _swig_property(_FactorGraph.FactorStore_data_get, _FactorGraph.FactorStore_data_set)

    def __init__(self, size):
        this = _FactorGraph.new_FactorStore(size)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FactorGraph.delete_FactorStore
    __del__ = lambda self: None
FactorStore_swigregister = _FactorGraph.FactorStore_swigregister
FactorStore_swigregister(FactorStore)

FACTORGRAPHSTORE_H = _FactorGraph.FACTORGRAPHSTORE_H
class FactorGraphDualStore(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NodeStores = _swig_property(_FactorGraph.FactorGraphDualStore_NodeStores_get, _FactorGraph.FactorGraphDualStore_NodeStores_set)
    FactorStores = _swig_property(_FactorGraph.FactorGraphDualStore_FactorStores_get, _FactorGraph.FactorGraphDualStore_FactorStores_set)
    AuctionStore = _swig_property(_FactorGraph.FactorGraphDualStore_AuctionStore_get, _FactorGraph.FactorGraphDualStore_AuctionStore_set)
    Evid = _swig_property(_FactorGraph.FactorGraphDualStore_Evid_get, _FactorGraph.FactorGraphDualStore_Evid_set)

    def __init__(self, NofNodes, NofFactors):
        this = _FactorGraph.new_FactorGraphDualStore(NofNodes, NofFactors)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FactorGraph.delete_FactorGraphDualStore
    __del__ = lambda self: None
FactorGraphDualStore_swigregister = _FactorGraph.FactorGraphDualStore_swigregister
FactorGraphDualStore_swigregister(FactorGraphDualStore)

FACTORGRAPH_H = _FactorGraph.FACTORGRAPH_H
class CFactorGraph(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetVerbose(self, verbose):
        return _FactorGraph.CFactorGraph_SetVerbose(self, verbose)

    def AddAuctionFactor(self):
        return _FactorGraph.CFactorGraph_AddAuctionFactor(self)

    def AddSubTourFactor(self, N, Nodes, AssignMents):
        return _FactorGraph.CFactorGraph_AddSubTourFactor(self, N, Nodes, AssignMents)
    __swig_destroy__ = _FactorGraph.delete_CFactorGraph
    __del__ = lambda self: None

    def GetNofNodes(self):
        return _FactorGraph.CFactorGraph_GetNofNodes(self)

    def __init__(self, NofNodes, NofStates):
        this = _FactorGraph.new_CFactorGraph(NofNodes, NofStates)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddNodeBelief(self, Nid, bi):
        return _FactorGraph.CFactorGraph_AddNodeBelief(self, Nid, bi)

    def AddEdge(self, ei, ej, data):
        return _FactorGraph.CFactorGraph_AddEdge(self, ei, ej, data)

    def AddSparseEdge(self, ei, ej, data, mi, mj, nnz, nnzIdx):
        return _FactorGraph.CFactorGraph_AddSparseEdge(self, ei, ej, data, mi, mj, nnz, nnzIdx)

    def AddSparseEdgeNZ(self, ei, ej, data, mi, mj, nnz, nnzIdx):
        return _FactorGraph.CFactorGraph_AddSparseEdgeNZ(self, ei, ej, data, mi, mj, nnz, nnzIdx)

    def AddGenericGenericSparseFactor(self, Nodes, NNZs, NNZv):
        return _FactorGraph.CFactorGraph_AddGenericGenericSparseFactor(self, Nodes, NNZs, NNZv)
    m_verbose = _swig_property(_FactorGraph.CFactorGraph_m_verbose_get, _FactorGraph.CFactorGraph_m_verbose_set)
    MinDualDecrease = _swig_property(_FactorGraph.CFactorGraph_MinDualDecrease_get, _FactorGraph.CFactorGraph_MinDualDecrease_set)

    def SetMinDualDecrease(self, EPS):
        return _FactorGraph.CFactorGraph_SetMinDualDecrease(self, EPS)

    def Solve(self, MaxIter):
        return _FactorGraph.CFactorGraph_Solve(self, MaxIter)

    def UpdateMessages(self):
        return _FactorGraph.CFactorGraph_UpdateMessages(self)

    def GetBelief(self, Nid):
        return _FactorGraph.CFactorGraph_GetBelief(self, Nid)

    def ComputeObj(self, decode):
        return _FactorGraph.CFactorGraph_ComputeObj(self, decode)

    def GetDecode(self):
        return _FactorGraph.CFactorGraph_GetDecode(self)

    def PrintFactorInfo(self):
        return _FactorGraph.CFactorGraph_PrintFactorInfo(self)

    def SetDecode(self, NodeId, Assigned):
        return _FactorGraph.CFactorGraph_SetDecode(self, NodeId, Assigned)

    def DualValue(self):
        return _FactorGraph.CFactorGraph_DualValue(self)

    def PrimalValue(self):
        return _FactorGraph.CFactorGraph_PrimalValue(self)

    def FindMostFracNodes(self):
        return _FactorGraph.CFactorGraph_FindMostFracNodes(self)

    def ResetMax(self):
        return _FactorGraph.CFactorGraph_ResetMax(self)

    def StoreDual(self):
        return _FactorGraph.CFactorGraph_StoreDual(self)

    def ReStoreDual(self, store):
        return _FactorGraph.CFactorGraph_ReStoreDual(self, store)
CFactorGraph_swigregister = _FactorGraph.CFactorGraph_swigregister
CFactorGraph_swigregister(CFactorGraph)

FACTOR_H = _FactorGraph.FACTOR_H
FACTOR_INVALID = _FactorGraph.FACTOR_INVALID
FACTOR_NODE_ID = _FactorGraph.FACTOR_NODE_ID
FACTOR_EDGE_ID = _FactorGraph.FACTOR_EDGE_ID
FACTOR_SPARSEEDGE_ID = _FactorGraph.FACTOR_SPARSEEDGE_ID
FACTOR_GENERAL_ID = _FactorGraph.FACTOR_GENERAL_ID
FACTOR_GENERALSPARSE_ID = _FactorGraph.FACTOR_GENERALSPARSE_ID
class EdgeInternal(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ei = _swig_property(_FactorGraph.EdgeInternal_ei_get, _FactorGraph.EdgeInternal_ei_set)
    ej = _swig_property(_FactorGraph.EdgeInternal_ej_get, _FactorGraph.EdgeInternal_ej_set)
    data = _swig_property(_FactorGraph.EdgeInternal_data_get, _FactorGraph.EdgeInternal_data_set)

    def __init__(self):
        this = _FactorGraph.new_EdgeInternal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FactorGraph.delete_EdgeInternal
    __del__ = lambda self: None
EdgeInternal_swigregister = _FactorGraph.EdgeInternal_swigregister
EdgeInternal_swigregister(EdgeInternal)

class SparseEdgeInternal(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ei = _swig_property(_FactorGraph.SparseEdgeInternal_ei_get, _FactorGraph.SparseEdgeInternal_ei_set)
    ej = _swig_property(_FactorGraph.SparseEdgeInternal_ej_get, _FactorGraph.SparseEdgeInternal_ej_set)
    data = _swig_property(_FactorGraph.SparseEdgeInternal_data_get, _FactorGraph.SparseEdgeInternal_data_set)
    mi = _swig_property(_FactorGraph.SparseEdgeInternal_mi_get, _FactorGraph.SparseEdgeInternal_mi_set)
    mj = _swig_property(_FactorGraph.SparseEdgeInternal_mj_get, _FactorGraph.SparseEdgeInternal_mj_set)
    nnz = _swig_property(_FactorGraph.SparseEdgeInternal_nnz_get, _FactorGraph.SparseEdgeInternal_nnz_set)
    nnzIdx = _swig_property(_FactorGraph.SparseEdgeInternal_nnzIdx_get, _FactorGraph.SparseEdgeInternal_nnzIdx_set)

    def __init__(self):
        this = _FactorGraph.new_SparseEdgeInternal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FactorGraph.delete_SparseEdgeInternal
    __del__ = lambda self: None
SparseEdgeInternal_swigregister = _FactorGraph.SparseEdgeInternal_swigregister
SparseEdgeInternal_swigregister(SparseEdgeInternal)

class CFactorBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    RegisterFactorCreator = staticmethod(_FactorGraph.CFactorBase_RegisterFactorCreator)
    CreateFactor = staticmethod(_FactorGraph.CFactorBase_CreateFactor)
    m_LocalMax = _swig_property(_FactorGraph.CFactorBase_m_LocalMax_get, _FactorGraph.CFactorBase_m_LocalMax_set)

    def Primal(self, decode):
        return _FactorGraph.CFactorBase_Primal(self, decode)

    def Dual(self):
        return _FactorGraph.CFactorBase_Dual(self)

    def UpdateMessages(self):
        return _FactorGraph.CFactorBase_UpdateMessages(self)

    def Print(self):
        return _FactorGraph.CFactorBase_Print(self)

    def IsGeneralFactor(self):
        return _FactorGraph.CFactorBase_IsGeneralFactor(self)

    def GetIncludedNodes(self, nodes):
        return _FactorGraph.CFactorBase_GetIncludedNodes(self, nodes)

    def size(self):
        return _FactorGraph.CFactorBase_size(self)
    __swig_destroy__ = _FactorGraph.delete_CFactorBase
    __del__ = lambda self: None
    FactorID = _FactorGraph.CFactorBase_FactorID
CFactorBase_swigregister = _FactorGraph.CFactorBase_swigregister
CFactorBase_swigregister(CFactorBase)

def CFactorBase_RegisterFactorCreator(ID, creator):
    return _FactorGraph.CFactorBase_RegisterFactorCreator(ID, creator)
CFactorBase_RegisterFactorCreator = _FactorGraph.CFactorBase_RegisterFactorCreator

def CFactorBase_CreateFactor(ID, nodes, data):
    return _FactorGraph.CFactorBase_CreateFactor(ID, nodes, data)
CFactorBase_CreateFactor = _FactorGraph.CFactorBase_CreateFactor

class NodeFactor(CFactorBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    m_bi = _swig_property(_FactorGraph.NodeFactor_m_bi_get, _FactorGraph.NodeFactor_m_bi_set)
    m_NofStates = _swig_property(_FactorGraph.NodeFactor_m_NofStates_get, _FactorGraph.NodeFactor_m_NofStates_set)
    m_id = _swig_property(_FactorGraph.NodeFactor_m_id_get, _FactorGraph.NodeFactor_m_id_set)

    def __init__(self):
        this = _FactorGraph.new_NodeFactor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FactorGraph.delete_NodeFactor
    __del__ = lambda self: None

    def UpdateDual(self):
        return _FactorGraph.NodeFactor_UpdateDual(self)

    def Primal(self, decode):
        return _FactorGraph.NodeFactor_Primal(self, decode)

    def Dual(self):
        return _FactorGraph.NodeFactor_Dual(self)

    def UpdateMessages(self):
        return _FactorGraph.NodeFactor_UpdateMessages(self)

    def IsGeneralFactor(self):
        return _FactorGraph.NodeFactor_IsGeneralFactor(self)

    def GetIncludedNodes(self, nodes):
        return _FactorGraph.NodeFactor_GetIncludedNodes(self, nodes)

    def Print(self):
        return _FactorGraph.NodeFactor_Print(self)
NodeFactor_swigregister = _FactorGraph.NodeFactor_swigregister
NodeFactor_swigregister(NodeFactor)

class SparseEdgeFactor(CFactorBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
SparseEdgeFactor_swigregister = _FactorGraph.SparseEdgeFactor_swigregister
SparseEdgeFactor_swigregister(SparseEdgeFactor)

class SparseEdgeNZFactor(SparseEdgeFactor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
SparseEdgeNZFactor_swigregister = _FactorGraph.SparseEdgeNZFactor_swigregister
SparseEdgeNZFactor_swigregister(SparseEdgeNZFactor)

class DenseEdgeFactor(CFactorBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Primal(self, decode):
        return _FactorGraph.DenseEdgeFactor_Primal(self, decode)

    def Dual(self):
        return _FactorGraph.DenseEdgeFactor_Dual(self)

    def IsGeneralFactor(self):
        return _FactorGraph.DenseEdgeFactor_IsGeneralFactor(self)

    def UpdateMessages(self):
        return _FactorGraph.DenseEdgeFactor_UpdateMessages(self)

    def GetIncludedNodes(self, nodes):
        return _FactorGraph.DenseEdgeFactor_GetIncludedNodes(self, nodes)

    def Print(self):
        return _FactorGraph.DenseEdgeFactor_Print(self)
    __swig_destroy__ = _FactorGraph.delete_DenseEdgeFactor
    __del__ = lambda self: None
    FactorID = _FactorGraph.DenseEdgeFactor_FactorID
DenseEdgeFactor_swigregister = _FactorGraph.DenseEdgeFactor_swigregister
DenseEdgeFactor_swigregister(DenseEdgeFactor)

class CGeneralSparseFactor(CFactorBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Primal(self, decode):
        return _FactorGraph.CGeneralSparseFactor_Primal(self, decode)

    def Dual(self):
        return _FactorGraph.CGeneralSparseFactor_Dual(self)

    def UpdateMessages(self):
        return _FactorGraph.CGeneralSparseFactor_UpdateMessages(self)

    def Print(self):
        return _FactorGraph.CGeneralSparseFactor_Print(self)

    def IsGeneralFactor(self):
        return _FactorGraph.CGeneralSparseFactor_IsGeneralFactor(self)

    def GetIncludedNodes(self, nodes):
        return _FactorGraph.CGeneralSparseFactor_GetIncludedNodes(self, nodes)
CGeneralSparseFactor_swigregister = _FactorGraph.CGeneralSparseFactor_swigregister
CGeneralSparseFactor_swigregister(CGeneralSparseFactor)



